Nuxt.js实战
Nuxt.js是一个基于Vue.js的通用应用框架。
通过客户端/服务端基础架构的抽象组织，Nuxt.js主要关注的是应用的UI渲染。

资源：
Nuxt.js官方文档

nuxt.js特性：
1、代码分层
2、服务端渲染
3、强大的路由功能
4、静态文件服务
。。。

nuxt渲染流程：
一个完整的服务器请求到渲染的过程
《官方渲染图》

nuxt安装：
运行create-nuxt-app
`npx create-nuxt-app <项目名>`
运行项目：npm run dev

案例：
实现如下功能点
1、服务端渲染
2、权限控制
3、全局状态管理
4、数据接口调用

路由
路由生成
pages目录中所有*.vue文件自动生成应用的路由配置，新建：
1、pages/admin.vue商品管理页
2、pages/login.vue登录页
访问localhost:3000试试看，并查看.nuxt/router.js验证生成路由

导航
添加路由导航，layouts/default.vue商品管理页
<nav>
    <nuxt-link to="/">首页</nuxt-link>
</nav>
功能和router-link等效
禁用预加载行为：<n-link no-prefetch>page not pre-fetched</n-link>

嵌套路由
创建内嵌子路由，你需要添加一个.vue文件，同时添加一个与该文件同名的目录用来存放子视图组件。
。。。
nuxt-child等效于router-view

配置路由
要扩展Nuxt.js创建的路由，可以通过router.extendRoutes选项配置。例如添加自定义路由：

视图
下图展示了Nuxt.js如何为指定的路由配置数据和视图
官网图。。

默认布局：

自定义布局：
创建空白布局页面layouts/blank.vue，用于login.vue

自定义错误页面：

页面：
页面组件就是vue组件，只不过Nuxt.js为这些组件添加了一些特殊的配置项
给首页添加标题和meta等，index.vue
  head() {
    return {
      title: "课程列表",
      // vue-meta利用hid确定要更新meta
      meta: [
        { name: "description", hid: "description", content: "set page meta" }
      ],
      link: [{ rel: "favicon", href: "favicon.ico" }]
    };
  },

异步数据获取
asyncData方法使得我们可以在设置组件数据之前异步获取或处理数据
范例：获取商品数据

接口准备
1、安装依赖：npm i koa-router koa-bodyparser -s
2、接口文件，server/api.js

整合axios
安装@nuxt/axios模块：npm install @nuxtjs/axios -s
配置：nuxt.config.js

中间件
中间件会在一个页面或一组页面渲染之前运行我们定义的函数，常用于权限控制、校验等任务。
范例代码：管理员页面保护，创建middleware/auth.js
    export default function({ route, redirect, store }) {
    // 上下文中通过store访问vuex中的全局状态
    // 通过vuex中令牌存在与否判断是否登录
    if (!store.state.user.token) {
        redirect("/login?redirect="+route.path);
    }
    }

局部注册中间件，admin.vue
    export default {
    middleware: ['auth']
    };
    
全局注册中间件：

状态管理VUEX
应用根目录下如果存在store目录，Nuxt.js将启用vuex状态树。定义各状态树时具名到处state,mutations,getters,actions即可。
范例：用户登录及登录状态保存，创建store/user.js
    export const state = () => ({
    token: ''
    });

    export const mutations = {
    init(state, token) {
        state.token = token;
    }
    };

    export const getters = {
    isLogin(state) {
        return !!state.token;
    }
    };

    export const actions = {
    login({ commit, getters }, u) {
        return this.$login(u).then(({ token }) => {
        if (token) {
            commit("init", token);
        }
        return getters.isLogin;
        });
    }
    };

插件
Nuxt.js会在运行应用之前执行插件函数，需要引入或设置Vue插件、自定义模块和第三方模块时特别有用。
范例代码：接口注入，引用插件机制将服务接口注入组件实例、store实例中，创建plugins/api-inject.js
    // 参数1上下文
    // 参数2注入函数
    export default ({ $axios }, inject) => {
    // 将来this.$login
    inject("login", user => {
        return $axios.$post("/api/login", user);
    });
    };
注册插件，nuxt.config.js
    plugins: [
        '@/plugins/api-inject',
    ],
范例：添加请求拦截器附加token，创建plugins/interceptor.js
    export default function({ $axios, store }) {
    // onRequest是@nuxtjs/axios模块提供的帮助方法
    $axios.onRequest(config => {
        // 附加令牌
        if (store.state.user.token) {
        config.headers.Authorization = "Bearer " + store.state.user.token;
        }
        return config;
    });
    }
注册插件

nuxtServerInit
通过在store的根模块中定义nuxtServerInit方法，Nuxt.js调用它的时候会将页面的上下文对象作为第2个参数传给他。当我们想将服务端的一些数据传到客户端时，这个方法非常好用。
范例：登录状态初始化，store/index.js
    export const actions = {
        nuxtServerInit({ commit }, { app }) {
            // nuxt-universal-cookie用法如下
            // app是server实例也就是koa实例
            const token = app.$cookies.get("token");
            // 表名是登录用户
            if (token) {
            console.log("nuxtServerInit: token:"+token);
            commit("user/init", token);
            }
        }
    };
1、安装依赖模块：cookie-universal-nuxt
npm i -S cookie-universal-nuxt
注册，nuxt.config.js
modules:["cookie-universal-nuxt"]
2、nuxtServerInit只能写在store/index.js
3、nuxtServerInit仅在服务端执行

发布部署
服务端渲染应用部署
先进行编译构建，然后再启动Nuxt服务
npm run build
npm start
//生成内容在.nuxt/dis中

静态应用部署
Nuxt.js可依据路由配置将应用静态化，使得我们可以将应用部署至任何一个静态站点主机服务商。
npm run generate
//注意渲染和接口服务器都需要处于启动状态
//生成内容再dist中
